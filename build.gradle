plugins {
    id "fabric-loom" version "1.11-SNAPSHOT"
    id "maven-publish"
    id "com.gradleup.shadow" version "8.3.8"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

fabricApi {
    configureDataGeneration {
        client = false
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //modImplementation "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    def micrometerVersion = "1.15.1"
    shadow(implementation("io.micrometer:micrometer-registry-prometheus:$micrometerVersion")) {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.slf4j", module: "slf4j-simple"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }

    def jettyVersion = "12.0.23"
    shadow(implementation("org.eclipse.jetty:jetty-unixdomain-server:${jettyVersion}")) {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.slf4j", module: "slf4j-simple"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
    shadow(implementation("org.eclipse.jetty:jetty-server:${jettyVersion}")) {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.slf4j", module: "slf4j-simple"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }

    // lombok
    def lombokVersion = "1.18.38"
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom {
    accessWidenerPath = file("src/main/resources/fabric-exporter.accesswidener")
}

shadowJar {
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
    configurations = [project.configurations.shadow]

    ext.relocateLib = { lib ->
        relocate(lib, "${project.group}.lib.${lib}")
    }
    relocateLib "com.jayway"
    relocateLib "groovy"
    relocateLib "groovyjarjarantlr4"
    relocateLib "groovyjarjarasm"
    relocateLib "groovyjarjarpicocli"
    relocateLib "io.prometheus"
    relocateLib "io.restassured"
    relocateLib "javax.servlet"
    relocateLib "org.apache.commons"
    relocateLib "org.apache.groovy"
    relocateLib "org.apache.http"
    relocateLib "org.ccil"
    relocateLib "org.codehaus"
    relocateLib "org.eclipse"
    relocateLib "org.hamcrest"
    relocateLib "org.objectweb"
    relocateLib "net.minidev"
    relocateLib "io.micrometer"
    relocateLib "google.protobuf"
    relocateLib "com.google.protobuf"
    relocateLib "org.HdrHistogram"
    relocateLib "org.LatencyUtils"
}

assemble.dependsOn shadowJar

remapJar {
    dependsOn shadowJar
    inputFile.set(shadowJar.archiveFile)
}
